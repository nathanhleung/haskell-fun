-- If we list all the natural numbers below 10 that are multiples of 3 or 5,
-- we get 3, 5, 6 and 9. The sum of these multiples is 23.

-- Find the sum of all the multiples of 3 or 5 below 1000.

result_p1 = sum [x | x <- [1..999], x `mod` 3 == 0 || x `mod` 5 == 0]
result_p1' = sum [x | x <- [3,6..999]] + sum [x | x <- [5,10..999]] - sum [x | x <- [15,30..999]]

-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do not exceed four million,
-- find the sum of the even-valued terms.

fibonacci :: Int -> Int
fibonacci 1 = 1
fibonacci 2 = 2
fibonacci x = fibonacci (x - 1) + fibonacci (x - 2)

-- Infinite list of Fibonacci numbers
-- lazy eval is great!
infFib = [fibonacci n | n <- [1..]]
evenInfFib = [n | n <- infFib, n `mod` 2 == 0]

-- sum of even fibonacci numbers less than 4 million
result_p2 = sum $ takeWhile (<4000000) evenInfFib